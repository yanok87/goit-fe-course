{"version":3,"sources":["components/Bank/TransactionHistory/Transactions.module.css","components/Bank/Controls/Controls.js","components/Bank/TransactionHistory/TransactionHistory.js","components/Bank/Balance/Balance.js","components/Bank/Dashboard/Dashboard.js","components/App.js","index.js"],"names":["module","exports","Controls","input","onHandleChangeInput","onHandleDepositSubmit","onHandleWithdrawSubmit","className","styles","controls","type","value","name","onChange","controls_input","controls_buttonDeposit","onClick","controls_button","TransactionHistory","transactionArr","history","map","id","amount","date","key","Balance","amountDeposit","amountWithdraw","amountBalance","balance","arrowUp","arrowDown","defaultProps","Dashboard","state","transactions","inputValue","deposit","withdraw","notifyA","toast","notifyB","handleChangeInput","e","target","setState","handleDepositSubmit","transactionDate","Date","toLocaleString","newDeposit","shortid","generate","Number","prevState","handleWithdrawSubmit","newWithdraw","getBankInfo","localStorage","getItem","newPartState","JSON","parse","this","err","prevProps","setItem","stringify","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9cb868b5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"Transactions_history__2LsfM\",\"balance\":\"Transactions_balance__22Qi6\",\"arrowUp\":\"Transactions_arrowUp__20eyq\",\"arrowDown\":\"Transactions_arrowDown__1IRK7\",\"controls\":\"Transactions_controls__HA9mm\",\"controls_input\":\"Transactions_controls_input__2KIjV\",\"controls_button\":\"Transactions_controls_button__28R6y\",\"controls_buttonDeposit\":\"Transactions_controls_buttonDeposit__-JJQm Transactions_controls_button__28R6y\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../TransactionHistory/Transactions.module.css';\n\nconst Controls = ({\n  input,\n  onHandleChangeInput,\n  onHandleDepositSubmit,\n  onHandleWithdrawSubmit,\n}) => {\n  return (\n    <section className={styles.controls}>\n      <input\n        type=\"number\"\n        value={input}\n        name=\"inputValue\"\n        onChange={onHandleChangeInput}\n        className={styles.controls_input}\n      />\n      <button\n        className={styles.controls_buttonDeposit}\n        type=\"button\"\n        onClick={onHandleDepositSubmit}\n      >\n        Deposit\n      </button>\n      <button\n        className={styles.controls_button}\n        type=\"button\"\n        onClick={onHandleWithdrawSubmit}\n      >\n        Withdraw\n      </button>\n    </section>\n  );\n};\n\nControls.propTypes = {\n  input: PropTypes.string.isRequired,\n  onHandleChangeInput: PropTypes.func.isRequired,\n  onHandleDepositSubmit: PropTypes.func.isRequired,\n  onHandleWithdrawSubmit: PropTypes.func.isRequired,\n};\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Transactions.module.css';\n\nconst TransactionHistory = ({ transactionArr }) => {\n  return (\n    <table className={styles.history}>\n      <thead>\n        <tr>\n          <th>Transaction</th>\n          <th>Amount</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {transactionArr.map(({ id, type, amount, date }) => (\n          <tr key={id}>\n            <td>{type}</td>\n            <td>{amount}$</td>\n            <td>{date}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTransactionHistory.propTypes = {\n  transactionArr: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      type: PropTypes.string,\n      amount: PropTypes.number,\n      date: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../TransactionHistory/Transactions.module.css';\n\nconst Balance = ({ amountDeposit, amountWithdraw, amountBalance }) => {\n  return (\n    <section className={styles.balance}>\n      <span className={styles.arrowUp}>⬆{amountDeposit}</span>\n      <span className={styles.arrowDown}>⬇{amountWithdraw}</span>\n      <span>Balance: {amountBalance}$</span>\n    </section>\n  );\n};\n\nBalance.defaultProps = {\n  amountDeposit: 0,\n  amountWithdraw: 0,\n  amountBalance: 0,\n};\n\nBalance.propTypes = {\n  amountDeposit: PropTypes.number,\n  amountWithdraw: PropTypes.number,\n  amountBalance: PropTypes.number,\n};\n\nexport default Balance;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Controls from '../Controls/Controls';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\nimport Balance from '../Balance/Balance';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass Dashboard extends Component {\n  state = {\n    transactions: [],\n    inputValue: '',\n    balance: 0,\n    deposit: 0,\n    withdraw: 0,\n  };\n\n  componentDidMount() {\n    try {\n      const getBankInfo = localStorage.getItem('bankInfo');\n\n      if (getBankInfo !== null) {\n        const newPartState = JSON.parse(getBankInfo);\n\n        this.setState({ ...newPartState });\n      }\n    } catch (err) {\n      throw ('err:', err);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { transactions, balance, deposit, withdraw } = this.state;\n\n    if (prevState.transactions !== transactions) {\n      localStorage.setItem(\n        'bankInfo',\n        JSON.stringify({ transactions, balance, deposit, withdraw }),\n      );\n    }\n  }\n\n  notifyA = () =>\n    toast('На счету недостаточно средств для проведения операции!');\n\n  notifyB = () => toast('Введите сумму для проведения операции!');\n\n  handleChangeInput = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleDepositSubmit = () => {\n    const { inputValue } = this.state;\n\n    const transactionDate = new Date().toLocaleString('en-GB');\n\n    const newDeposit = {\n      id: shortid.generate(),\n      type: 'Deposit',\n      amount: Number(inputValue),\n      date: transactionDate,\n    };\n\n    if (Number(inputValue) === 0 || Number(inputValue) === '') {\n      this.notifyB();\n    } else {\n      this.setState(prevState => ({\n        transactions: [...prevState.transactions, newDeposit],\n        balance: prevState.balance + Number(inputValue),\n        deposit: prevState.deposit + Number(inputValue),\n        inputValue: '',\n      }));\n    }\n  };\n\n  handleWithdrawSubmit = () => {\n    const { inputValue, balance } = this.state;\n\n    const transactionDate = new Date().toLocaleString('en-GB');\n\n    const newWithdraw = {\n      id: shortid.generate(),\n      type: 'Withdrawal',\n      amount: Number(inputValue),\n      date: transactionDate,\n    };\n\n    if (Number(inputValue) > balance) {\n      this.notifyA();\n    } else if (Number(inputValue) === 0 || Number(inputValue) === '') {\n      this.notifyB();\n    } else {\n      this.setState(prevState => ({\n        transactions: [...prevState.transactions, newWithdraw],\n        balance: prevState.balance - Number(inputValue),\n        withdraw: prevState.withdraw + Number(inputValue),\n        inputValue: '',\n      }));\n    }\n  };\n\n  render() {\n    const { transactions, inputValue, balance, deposit, withdraw } = this.state;\n\n    return (\n      <div className=\"dashboard\">\n        <Controls\n          input={inputValue}\n          onHandleChangeInput={this.handleChangeInput}\n          onHandleDepositSubmit={this.handleDepositSubmit}\n          onHandleWithdrawSubmit={this.handleWithdrawSubmit}\n        />\n        <Balance\n          amountDeposit={deposit}\n          amountWithdraw={withdraw}\n          amountBalance={balance}\n        />\n        <TransactionHistory transactionArr={transactions} />\n\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\n\nimport Dashboard from './Bank/Dashboard/Dashboard';\n\nconst App = () => {\n  return (\n    <>\n      <Dashboard />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}